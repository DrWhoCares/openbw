
namespace UnitTypes {
	enum
	{
		Terran_Marine = 0,
		Terran_Ghost,
		Terran_Vulture,
		Terran_Goliath,
		Terran_Goliath_Turret,
		Terran_Siege_Tank_Tank_Mode,
		Terran_Siege_Tank_Tank_Mode_Turret,
		Terran_SCV,
		Terran_Wraith,
		Terran_Science_Vessel,
		Hero_Gui_Montag,
		Terran_Dropship,
		Terran_Battlecruiser,
		Terran_Vulture_Spider_Mine,
		Terran_Nuclear_Missile,
		Terran_Civilian,
		Hero_Sarah_Kerrigan,
		Hero_Alan_Schezar,
		Hero_Alan_Schezar_Turret,
		Hero_Jim_Raynor_Vulture,
		Hero_Jim_Raynor_Marine,
		Hero_Tom_Kazansky,
		Hero_Magellan,
		Hero_Edmund_Duke_Tank_Mode,
		Hero_Edmund_Duke_Tank_Mode_Turret,
		Hero_Edmund_Duke_Siege_Mode,
		Hero_Edmund_Duke_Siege_Mode_Turret,
		Hero_Arcturus_Mengsk,
		Hero_Hyperion,
		Hero_Norad_II,
		Terran_Siege_Tank_Siege_Mode,
		Terran_Siege_Tank_Siege_Mode_Turret,
		Terran_Firebat,
		Spell_Scanner_Sweep,
		Terran_Medic,
		Zerg_Larva,
		Zerg_Egg,
		Zerg_Zergling,
		Zerg_Hydralisk,
		Zerg_Ultralisk,
		Zerg_Broodling,
		Zerg_Drone,
		Zerg_Overlord,
		Zerg_Mutalisk,
		Zerg_Guardian,
		Zerg_Queen,
		Zerg_Defiler,
		Zerg_Scourge,
		Hero_Torrasque,
		Hero_Matriarch,
		Zerg_Infested_Terran,
		Hero_Infested_Kerrigan,
		Hero_Unclean_One,
		Hero_Hunter_Killer,
		Hero_Devouring_One,
		Hero_Kukulza_Mutalisk,
		Hero_Kukulza_Guardian,
		Hero_Yggdrasill,
		Terran_Valkyrie,
		Zerg_Cocoon,
		Protoss_Corsair,
		Protoss_Dark_Templar,
		Zerg_Devourer,
		Protoss_Dark_Archon,
		Protoss_Probe,
		Protoss_Zealot,
		Protoss_Dragoon,
		Protoss_High_Templar,
		Protoss_Archon,
		Protoss_Shuttle,
		Protoss_Scout,
		Protoss_Arbiter,
		Protoss_Carrier,
		Protoss_Interceptor,
		Hero_Dark_Templar,
		Hero_Zeratul,
		Hero_Tassadar_Zeratul_Archon,
		Hero_Fenix_Zealot,
		Hero_Fenix_Dragoon,
		Hero_Tassadar,
		Hero_Mojo,
		Hero_Warbringer,
		Hero_Gantrithor,
		Protoss_Reaver,
		Protoss_Observer,
		Protoss_Scarab,
		Hero_Danimoth,
		Hero_Aldaris,
		Hero_Artanis,
		Critter_Rhynadon,
		Critter_Bengalaas,
		Special_Cargo_Ship,
		Special_Mercenary_Gunship,
		Critter_Scantid,
		Critter_Kakaru,
		Critter_Ragnasaur,
		Critter_Ursadon,
		Zerg_Lurker_Egg,
		Hero_Raszagal,
		Hero_Samir_Duran,
		Hero_Alexei_Stukov,
		Special_Map_Revealer,
		Hero_Gerard_DuGalle,
		Zerg_Lurker,
		Hero_Infested_Duran,
		Spell_Disruption_Web,
		Terran_Command_Center,
		Terran_Comsat_Station,
		Terran_Nuclear_Silo,
		Terran_Supply_Depot,
		Terran_Refinery,
		Terran_Barracks,
		Terran_Academy,
		Terran_Factory,
		Terran_Starport,
		Terran_Control_Tower,
		Terran_Science_Facility,
		Terran_Covert_Ops,
		Terran_Physics_Lab,
		Unused_Terran1,
		Terran_Machine_Shop,
		Unused_Terran2,
		Terran_Engineering_Bay,
		Terran_Armory,
		Terran_Missile_Turret,
		Terran_Bunker,
		Special_Crashed_Norad_II,
		Special_Ion_Cannon,
		Powerup_Uraj_Crystal,
		Powerup_Khalis_Crystal,
		Zerg_Infested_Command_Center,
		Zerg_Hatchery,
		Zerg_Lair,
		Zerg_Hive,
		Zerg_Nydus_Canal,
		Zerg_Hydralisk_Den,
		Zerg_Defiler_Mound,
		Zerg_Greater_Spire,
		Zerg_Queens_Nest,
		Zerg_Evolution_Chamber,
		Zerg_Ultralisk_Cavern,
		Zerg_Spire,
		Zerg_Spawning_Pool,
		Zerg_Creep_Colony,
		Zerg_Spore_Colony,
		Unused_Zerg1,
		Zerg_Sunken_Colony,
		Special_Overmind_With_Shell,
		Special_Overmind,
		Zerg_Extractor,
		Special_Mature_Chrysalis,
		Special_Cerebrate,
		Special_Cerebrate_Daggoth,
		Unused_Zerg2,
		Protoss_Nexus,
		Protoss_Robotics_Facility,
		Protoss_Pylon,
		Protoss_Assimilator,
		Unused_Protoss1,
		Protoss_Observatory,
		Protoss_Gateway,
		Unused_Protoss2,
		Protoss_Photon_Cannon,
		Protoss_Citadel_of_Adun,
		Protoss_Cybernetics_Core,
		Protoss_Templar_Archives,
		Protoss_Forge,
		Protoss_Stargate,
		Special_Stasis_Cell_Prison,
		Protoss_Fleet_Beacon,
		Protoss_Arbiter_Tribunal,
		Protoss_Robotics_Support_Bay,
		Protoss_Shield_Battery,
		Special_Khaydarin_Crystal_Form,
		Special_Protoss_Temple,
		Special_XelNaga_Temple,
		Resource_Mineral_Field,
		Resource_Mineral_Field_Type_2,
		Resource_Mineral_Field_Type_3,
		Unused_Cave,
		Unused_Cave_In,
		Unused_Cantina,
		Unused_Mining_Platform,
		Unused_Independant_Command_Center,
		Special_Independant_Starport,
		Unused_Independant_Jump_Gate,
		Unused_Ruins,
		Unused_Khaydarin_Crystal_Formation,
		Resource_Vespene_Geyser,
		Special_Warp_Gate,
		Special_Psi_Disrupter,
		Unused_Zerg_Marker,
		Unused_Terran_Marker,
		Unused_Protoss_Marker,
		Special_Zerg_Beacon,
		Special_Terran_Beacon,
		Special_Protoss_Beacon,
		Special_Zerg_Flag_Beacon,
		Special_Terran_Flag_Beacon,
		Special_Protoss_Flag_Beacon,
		Special_Power_Generator,
		Special_Overmind_Cocoon,
		Spell_Dark_Swarm,
		Special_Floor_Missile_Trap,
		Special_Floor_Hatch,
		Special_Upper_Level_Door,
		Special_Right_Upper_Level_Door,
		Special_Pit_Door,
		Special_Right_Pit_Door,
		Special_Floor_Gun_Trap,
		Special_Wall_Missile_Trap,
		Special_Wall_Flame_Trap,
		Special_Right_Wall_Missile_Trap,
		Special_Right_Wall_Flame_Trap,
		Special_Start_Location,
		Powerup_Flag,
		Powerup_Young_Chrysalis,
		Powerup_Psi_Emitter,
		Powerup_Data_Disk,
		Powerup_Khaydarin_Crystal,
		Powerup_Mineral_Cluster_Type_1,
		Powerup_Mineral_Cluster_Type_2,
		Powerup_Protoss_Gas_Orb_Type_1,
		Powerup_Protoss_Gas_Orb_Type_2,
		Powerup_Zerg_Gas_Sac_Type_1,
		Powerup_Zerg_Gas_Sac_Type_2,
		Powerup_Terran_Gas_Tank_Type_1,
		Powerup_Terran_Gas_Tank_Type_2,

		None,
		AllUnits,
		Men,
		Buildings,
		Factories,
		Unknown,
		MAX
	};
}

namespace StatusFlags
{
	enum Enum
	{
		Completed = 0x00000001,
		GroundedBuilding = 0x00000002, // a building that is on the ground
		InAir = 0x00000004,
		Disabled = 0x00000008,  /**< Protoss Unpowered */
		Burrowed = 0x00000010,
		InBuilding = 0x00000020,
		InTransport = 0x00000040,
		UNKNOWN1 = 0x00000080,  /**< @todo Unknown */ // EDIT: found in target acquisition
		RequiresDetection = 0x00000100,
		Cloaked = 0x00000200,
		DoodadStatesThing = 0x00000400,  /**< @todo Unknown */
		CloakingForFree = 0x00000800,  /**< Requires no energy to cloak */
		CanNotReceiveOrders = 0x00001000,
		NoBrkCodeStart = 0x00002000,  /**< Unbreakable code section in iscript */
		UNKNOWN2 = 0x00004000,  /**< @todo Unknown */
		CanNotAttack = 0x00008000,  /**< @todo Unknown */
		IsAUnit = 0x00010000,  // canAttack? /**< @todo Unknown */
		IsABuilding = 0x00020000,
		IgnoreTileCollision = 0x00040000,
		Unmovable = 0x00080000,
		IsNormal = 0x00100000,  /**< 1 for "normal" units, 0 for hallucinated units */
		NoCollide = 0x00200000,
		UNKNOWN5 = 0x00400000,
		IsGathering = 0x00800000,
		UNKNOWN6 = 0x01000000,
		UNKNOWN7 = 0x02000000, // Turret related
		Invincible = 0x04000000,
		HoldingPosition = 0x08000000, // Set if the unit is currently holding position
		SpeedUpgrade = 0x10000000,
		CooldownUpgrade = 0x20000000,
		IsHallucination = 0x40000000,  /**< 1 for hallucinated units, 0 for "normal" units */
		IsSelfDestructing = 0x80000000  // Set for when the unit is self-destructing (scarab, scourge, infested terran)
	};
};

namespace WeaponTypes
{
		/// Enumeration of weapon types
	enum Enum
	{
		Gauss_Rifle = 0,
		Gauss_Rifle_Jim_Raynor = 1,
		C_10_Canister_Rifle = 2,
		C_10_Canister_Rifle_Sarah_Kerrigan = 3,
		Fragmentation_Grenade = 4,
		Fragmentation_Grenade_Jim_Raynor = 5,
		Spider_Mines = 6,
		Twin_Autocannons = 7,
		Hellfire_Missile_Pack = 8,
		Twin_Autocannons_Alan_Schezar = 9,
		Hellfire_Missile_Pack_Alan_Schezar = 10,
		Arclite_Cannon = 11,
		Arclite_Cannon_Edmund_Duke = 12,
		Fusion_Cutter = 13,

		Gemini_Missiles = 15,
		Burst_Lasers = 16,
		Gemini_Missiles_Tom_Kazansky = 17,
		Burst_Lasers_Tom_Kazansky = 18,
		ATS_Laser_Battery = 19,
		ATA_Laser_Battery = 20,
		ATS_Laser_Battery_Hero = 21,
		ATA_Laser_Battery_Hero = 22,
		ATS_Laser_Battery_Hyperion = 23,
		ATA_Laser_Battery_Hyperion = 24,
		Flame_Thrower = 25,
		Flame_Thrower_Gui_Montag = 26,
		Arclite_Shock_Cannon = 27,
		Arclite_Shock_Cannon_Edmund_Duke = 28,
		Longbolt_Missile = 29,
		Yamato_Gun = 30,
		Nuclear_Strike = 31,
		Lockdown = 32,
		EMP_Shockwave = 33,
		Irradiate = 34,
		Claws = 35,
		Claws_Devouring_One = 36,
		Claws_Infested_Kerrigan = 37,
		Needle_Spines = 38,
		Needle_Spines_Hunter_Killer = 39,
		Kaiser_Blades = 40,
		Kaiser_Blades_Torrasque = 41,
		Toxic_Spores = 42,
		Spines = 43,

		Acid_Spore = 46,
		Acid_Spore_Kukulza = 47,
		Glave_Wurm = 48,
		Glave_Wurm_Kukulza = 49,

		Seeker_Spores = 52,
		Subterranean_Tentacle = 53,
		Suicide_Infested_Terran = 54,
		Suicide_Scourge = 55,
		Parasite = 56,
		Spawn_Broodlings = 57,
		Ensnare = 58,
		Dark_Swarm = 59,
		Plague = 60,
		Consume = 61,
		Particle_Beam = 62,

		Psi_Blades = 64,
		Psi_Blades_Fenix = 65,
		Phase_Disruptor = 66,
		Phase_Disruptor_Fenix = 67,

		Psi_Assault = 69,
		Psionic_Shockwave = 70,
		Psionic_Shockwave_TZ_Archon = 71,

		Dual_Photon_Blasters = 73,
		Anti_Matter_Missiles = 74,
		Dual_Photon_Blasters_Mojo = 75,
		Anti_Matter_Missiles_Mojo = 76,
		Phase_Disruptor_Cannon = 77,
		Phase_Disruptor_Cannon_Danimoth = 78,
		Pulse_Cannon = 79,
		STS_Photon_Cannon = 80,
		STA_Photon_Cannon = 81,
		Scarab = 82,
		Stasis_Field = 83,
		Psionic_Storm = 84,
		Warp_Blades_Zeratul = 85,
		Warp_Blades_Hero = 86,

		Platform_Laser_Battery = 92,
		Independant_Laser_Battery = 93,

		Twin_Autocannons_Floor_Trap = 96,
		Hellfire_Missile_Pack_Wall_Trap = 97,
		Flame_Thrower_Wall_Trap = 98,
		Hellfire_Missile_Pack_Floor_Trap = 99,

		Neutron_Flare = 100,
		Disruption_Web = 101,
		Restoration = 102,
		Halo_Rockets = 103,
		Corrosive_Acid = 104,
		Mind_Control = 105,
		Feedback = 106,
		Optical_Flare = 107,
		Maelstrom = 108,
		Subterranean_Spines = 109,

		Warp_Blades = 111,
		C_10_Canister_Rifle_Samir_Duran = 112,
		C_10_Canister_Rifle_Infested_Duran = 113,
		Dual_Photon_Blasters_Artanis = 114,
		Anti_Matter_Missiles_Artanis = 115,
		C_10_Canister_Rifle_Alexei_Stukov = 116,

		None = 130,
		Unknown,
		MAX
	};
}

namespace UnitPrototypeFlags
{
	enum Enum
	{
		Building = 0x00000001,
		Addon = 0x00000002,
		Flyer = 0x00000004,
		Worker = 0x00000008,
		Subunit = 0x00000010,
		FlyingBuilding = 0x00000020,
		Hero = 0x00000040,
		RegeneratesHP = 0x00000080,
		AnimatedIdle = 0x00000100,
		Cloakable = 0x00000200,
		TwoUnitsIn1Egg = 0x00000400,
		NeutralAccessories = 0x00000800,
		ResourceDepot = 0x00001000,
		ResourceContainer = 0x00002000,
		RoboticUnit = 0x00004000,
		Detector = 0x00008000,
		OrganicUnit = 0x00010000,
		CreepBuilding = 0x00020000,
		Unused = 0x00040000,
		RequiresPsi = 0x00080000,
		Burrowable = 0x00100000,
		Spellcaster = 0x00200000,
		PermanentCloak = 0x00400000,
		NPCOrAccessories = 0x00800000,
		MorphFromOtherUnit = 0x01000000,
		LargeUnit = 0x02000000,
		HugeUnit = 0x04000000,
		AutoAttackAndMove = 0x08000000,
		Attack = 0x10000000, /**< Can attack */
		Invincible = 0x20000000,
		Mechanical = 0x40000000,
		ProducesUnits = 0x80000000 /**< It can produce units directly (making buildings doesn't count) */
	};
}

namespace SpriteFlags {
	enum {
		DrawSelection = 0x1,

		Selected = 0x8,

		Hidden = 0x20,
		Burrowed = 0x40,
		UnbreakableCode = 0x80
	};
}

#include "idenums.h"


namespace Orders {
	enum Enum
	{
		Die,
		Stop,
		Guard,
		PlayerGuard,
		TurretGuard,
		BunkerGuard,
		Move,
		ReaverStop,
		Attack1,
		Attack2,
		AttackUnit,
		AttackFixedRange,
		AttackTile,
		Hover,
		AttackMove,
		InfestedCommandCenter,
		UnusedNothing,
		UnusedPowerup,
		TowerGuard,
		TowerAttack,
		VultureMine,
		StayInRange,
		TurretAttack,
		Nothing,
		Unused_24,
		DroneStartBuild,
		DroneBuild,
		CastInfestation,
		MoveToInfest,
		InfestingCommandCenter,
		PlaceBuilding,
		PlaceProtossBuilding,
		CreateProtossBuilding,
		ConstructingBuilding,
		Repair,
		MoveToRepair,
		PlaceAddon,
		BuildAddon,
		Train,
		RallyPointUnit,
		RallyPointTile,
		ZergBirth,
		ZergUnitMorph,
		ZergBuildingMorph,
		IncompleteBuilding,
		IncompleteMorphing,
		BuildNydusExit,
		EnterNydusCanal,
		IncompleteWarping,
		Follow,
		Carrier,
		ReaverCarrierMove,
		CarrierStop,
		CarrierAttack,
		CarrierMoveToAttack,
		CarrierIgnore2,
		CarrierFight,
		CarrierHoldPosition,
		Reaver,
		ReaverAttack,
		ReaverMoveToAttack,
		ReaverFight,
		ReaverHoldPosition,
		TrainFighter,
		InterceptorAttack,
		ScarabAttack,
		RechargeShieldsUnit,
		RechargeShieldsBattery,
		ShieldBattery,
		InterceptorReturn,
		DroneLand,
		BuildingLand,
		BuildingLiftOff,
		DroneLiftOff,
		LiftingOff,
		ResearchTech,
		Upgrade,
		Larva,
		SpawningLarva,
		Harvest1,
		Harvest2,
		MoveToGas,
		WaitForGas,
		HarvestGas,
		ReturnGas,
		MoveToMinerals,
		WaitForMinerals,
		MiningMinerals,
		Harvest3,
		Harvest4,
		ReturnMinerals,
		Interrupted,
		EnterTransport,
		PickupIdle,
		PickupTransport,
		PickupBunker,
		Pickup4,
		PowerupIdle,
		Sieging,
		Unsieging,
		WatchTarget,
		InitCreepGrowth,
		SpreadCreep,
		StoppingCreepGrowth,
		GuardianAspect,
		ArchonWarp,
		CompletingArchonSummon,
		HoldPosition,
		QueenHoldPosition,
		Cloak,
		Decloak,
		Unload,
		MoveUnload,
		FireYamatoGun,
		MoveToFireYamatoGun,
		CastLockdown,
		Burrowing,
		Burrowed,
		Unburrowing,
		CastDarkSwarm,
		CastParasite,
		CastSpawnBroodlings,
		CastEMPShockwave,
		NukeWait,
		NukeTrain,
		NukeLaunch,
		NukePaint,
		NukeUnit,
		CastNuclearStrike,
		NukeTrack,
		InitializeArbiter,
		CloakNearbyUnits,
		PlaceMine,
		RightClickAction,
		SuicideUnit,
		SuicideLocation,
		SuicideHoldPosition,
		CastRecall,
		Teleport,
		CastScannerSweep,
		Scanner,
		CastDefensiveMatrix,
		CastPsionicStorm,
		CastIrradiate,
		CastPlague,
		CastConsume,
		CastEnsnare,
		CastStasisField,
		CastHallucination,
		Hallucination2,
		ResetCollision,
		ResetHarvestCollision,
		Patrol,
		CTFCOPInit,
		CTFCOPStarted,
		CTFCOP2,
		ComputerAI,
		AtkMoveEP,
		HarassMove,
		AIPatrol,
		GuardPost,
		RescuePassive,
		Neutral,
		ComputerReturn,
		InitializePsiProvider,
		SelfDestructing,
		Critter,
		HiddenGun,
		OpenDoor,
		CloseDoor,
		HideTrap,
		RevealTrap,
		EnableDoodad,
		DisableDoodad,
		WarpIn,
		Medic,
		MedicHeal,
		HealMove,
		MedicHoldPosition,
		MedicHealToIdle,
		CastRestoration,
		CastDisruptionWeb,
		CastMindControl,
		DarkArchonMeld,
		CastFeedback,
		CastOpticalFlare,
		CastMaelstrom,
		JunkYardDog,
		Fatal,
		None,
		Unknown,
		MAX
	};
}

namespace GroupFlags
{
	enum Enum
	{
		Zerg = 1 << 0,
		Terran = 1 << 1,
		Protoss = 1 << 2,
		Men = 1 << 3,
		Building = 1 << 4,
		Factory = 1 << 5,
		Independant = 1 << 6,
		Neutral = 1 << 7
	};
}


namespace UpgradeTypes
{
	enum Enum
	{
		Terran_Infantry_Armor = 0,
		Terran_Vehicle_Plating = 1,
		Terran_Ship_Plating = 2,
		Zerg_Carapace = 3,
		Zerg_Flyer_Carapace = 4,
		Protoss_Ground_Armor = 5,
		Protoss_Air_Armor = 6,
		Terran_Infantry_Weapons = 7,
		Terran_Vehicle_Weapons = 8,
		Terran_Ship_Weapons = 9,
		Zerg_Melee_Attacks = 10,
		Zerg_Missile_Attacks = 11,
		Zerg_Flyer_Attacks = 12,
		Protoss_Ground_Weapons = 13,
		Protoss_Air_Weapons = 14,
		Protoss_Plasma_Shields = 15,
		U_238_Shells = 16,
		Ion_Thrusters = 17,

		Titan_Reactor = 19,
		Ocular_Implants = 20,
		Moebius_Reactor = 21,
		Apollo_Reactor = 22,
		Colossus_Reactor = 23,
		Ventral_Sacs = 24,
		Antennae = 25,
		Pneumatized_Carapace = 26,
		Metabolic_Boost = 27,
		Adrenal_Glands = 28,
		Muscular_Augments = 29,
		Grooved_Spines = 30,
		Gamete_Meiosis = 31,
		Metasynaptic_Node = 32,
		Singularity_Charge = 33,
		Leg_Enhancements = 34,
		Scarab_Damage = 35,
		Reaver_Capacity = 36,
		Gravitic_Drive = 37,
		Sensor_Array = 38,
		Gravitic_Boosters = 39,
		Khaydarin_Amulet = 40,
		Apial_Sensors = 41,
		Gravitic_Thrusters = 42,
		Carrier_Capacity = 43,
		Khaydarin_Core = 44,

		Argus_Jewel = 47,

		Argus_Talisman = 49,

		Caduceus_Reactor = 51,
		Chitinous_Plating = 52,
		Anabolic_Synthesis = 53,
		Charon_Boosters = 54,

		Upgrade_60 = 60,
		None = 61,
		Unknown,
		MA
	};
}

namespace movement_states {
	enum {
		UM_Init,
		UM_InitSeq,
		UM_Lump,
		UM_Turret,
		UM_Bunker,
		UM_BldgTurret,
		UM_Hidden,
		UM_Flyer,
		UM_FakeFlyer,
		UM_AtRest,
		UM_Dormant,
		UM_AtMoveTarget,
		UM_CheckIllegal,
		UM_MoveToLegal,
		UM_LumpWannabe,
		UM_FailedPath,
		UM_RetryPath,
		UM_StartPath,
		UM_UIOrderDelay,
		UM_TurnAndStart,
		UM_FaceTarget,
		UM_NewMoveTarget,
		UM_AnotherPath,
		UM_Repath,
		UM_RepathMovers,
		UM_FollowPath,
		UM_ScoutPath,
		UM_ScoutFree,
		UM_FixCollision,
		UM_WaitFree,
		UM_GetFree,
		UM_SlidePrep,
		UM_SlideFree,
		UM_ForceMoveFree,
		UM_FixTerrain,
		UM_TerrainSlide
	};
}

namespace MovementFlags
{
	enum Enum
	{
		OrderedAtLeastOnce = 0x01, /**< @todo investigate more.
								   * It get's to 0 after the first move-involved command - sometimes get's to 1 again
								   */
		Accelerating = 0x02, /**< Unit is accelerating  */
		Braking = 0x04, /**< Not when unit reaches destination, just when you hit stop, or building is finished */
		StartingAttack = 0x08, /** Always 1 for a moment when the unit is starting new attack cycle*/
		Moving = 0x10, /**< Still moving, but not accelerating */
		Lifted = 0x20, /**< Lifted cc has this on (just before it moves) */
		unknown1 = 0x40, /**< The value is unknown, but it has something to do with changing direction& accelerating */
		_alwaysZero1 = 0x80
	};
};

namespace MiniTileFlags
{
	enum Enum
	{
		Walkable = 1 << 0,
		Middle = 1 << 1,
		High = 1 << 2, /**< (Mid and High unchecked = Low) */
		BlocksView = 1 << 3,
		Ramp = 1 << 4, /**< Appears on the middle minitiles of most ramps/stairs. */
	};
}
